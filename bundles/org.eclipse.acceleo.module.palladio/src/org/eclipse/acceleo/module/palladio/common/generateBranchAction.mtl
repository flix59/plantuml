[comment encoding = UTF-8 /]
[module generateBranchAction('http://palladiosimulator.org/PalladioComponentModel/Repository/5.2', 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2', 'http://palladiosimulator.org/Analyzer/Quality/1.0', 'http://palladiosimulator.org/PalladioComponentModel/5.2')]
[import org::eclipse::acceleo::module::palladio::common::generate/]

[template public getBranchActionCall(action : AbstractAction, repository : Repository, componentName: String, aSystem: OclAny, aModusUML: Boolean) post(trim())]
[if action.oclIsTypeOf(BranchAction)]
[let branchAction : BranchAction = action.oclAsType(BranchAction)]
[let firstTransition : AbstractBranchTransition = branchAction.eContents(AbstractBranchTransition) -> any(t | true)]
alt [runAllBranchTransitions(firstTransition, repository, componentName, aSystem, aModusUML)/]
[for (transition: AbstractBranchTransition | branchAction.eContents(AbstractBranchTransition) -> reject(transition | transition = firstTransition))]
else [runAllBranchTransitions(transition, repository, componentName, aSystem, aModusUML)/]
[/for]
[/let]  
[/let]  
end   
[/if]
[/template]

[template private runAllBranchTransitions(transition: AbstractBranchTransition, repository : Repository, componentName: String, aSystem: OclAny, aModusUML: Boolean) post(trim())]
[aGetGuardedBranchTransition(transition, repository, componentName, aSystem, aModusUML)/]
[aGetProbabilisticBranchTransition(transition, repository, componentName, aSystem, aModusUML)/]
[/template]

[template private aGetGuardedBranchTransition(transition : AbstractBranchTransition, repository : Repository, componentName: String, aSystem: OclAny, aModusUML: Boolean) post(trim())]
[if transition.oclIsTypeOf(GuardedBranchTransition)] 
[let guardTransition: GuardedBranchTransition = transition.oclAsType(GuardedBranchTransition)]
[guardTransition.entityName/], spez: [guardTransition.branchCondition_GuardedBranchTransition.specification/]
[generateBranchBehaviour(transition, repository, componentName, aSystem, aModusUML)/]
[/let]
[/if]
[/template]

[template private aGetProbabilisticBranchTransition(transition : AbstractBranchTransition, repository : Repository, componentName: String, aSystem: OclAny, aModusUML: Boolean) post(trim())]
[if transition.oclIsTypeOf(ProbabilisticBranchTransition)]
[let probTransition: ProbabilisticBranchTransition = transition.oclAsType(ProbabilisticBranchTransition)]
probability of [probTransition.branchProbability/]
[generateBranchBehaviour(transition, repository, componentName, aSystem, aModusUML)/]
[/let]
[/if]
[/template]

[template private generateBranchBehaviour(transition : AbstractBranchTransition, repository: Repository, componentName: String, aSystem: OclAny, aModusUML: Boolean)]
[let startAction : StartAction = getStartAction(transition.branchBehaviour_BranchTransition) ]
[if not startAction.oclIsInvalid()]
[startActionGeneration(startAction, repository, componentName, aSystem, aModusUML)/]
[/if]
[/let]
[/template]