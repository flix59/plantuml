[comment encoding = UTF-8 /]
[module generateExternalCall('http://palladiosimulator.org/PalladioComponentModel/Repository/5.2',  'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2', 'http://palladiosimulator.org/PalladioComponentModel/5.2')]

[import org::eclipse::acceleo::module::palladio::common::generate/]
[template public getExternalCall(action: AbstractAction, repository : Repository, componentName : String, aSystem: OclAny)  post(trim())]
[if action.oclIsTypeOf(ExternalCallAction) ]
[let exAction: ExternalCallAction = action.oclAsType(ExternalCallAction)]
	[let aMethodName : String = getExternalCallMethod(exAction)]
	[if (aMethodName.size() > 0)]
	[let providers: Sequence(BasicComponent) = selectPorviders(getAllProviders(repository), exAction)]
[generateNextComponent(componentName, providers, aMethodName, exAction, repository, aSystem)/]
	[/let] 
	[/if] 
	[/let]
[/let]  
[/if]
[/template]

[template generateNextComponent (startComponentName: String, providers: Sequence(BasicComponent), aMethodName: String, action: ExternalCallAction, repository: Repository, aSystem: OclAny)]
[let normalComponents : Sequence(BasicComponent) = equalImplementations(providers ->  reject(provider : BasicComponent | isAdapter(provider)))]
[let size : Integer = (normalComponents -> size())]
[if providers -> size() = 1]
	[generateProviderText(startComponentName, normalComponents -> first(), aMethodName, action, repository,normalComponents -> first().entityName, aSystem)/]
[/if]	
[if not aSystem.oclIsTypeOf(System)]
[if size >= 1 and not (providers -> size() = 1) and size < 3]
[generateFewInterfaceText(startComponentName, normalComponents, aMethodName, action, repository, aSystem)/]
[/if]
[if size > 3 or size = 0]
	[generateInterfaceText(startComponentName, aMethodName, action)/]
[/if]
[/if]
[if aSystem.oclIsTypeOf(System)]
[let component: BasicComponent= getComponentFromSystem(aSystem.oclAsType(System), action)]
[generateProviderText(startComponentName,getComponentFromSystem(aSystem.oclAsType(System), action), aMethodName, action,repository, normalComponents -> first().entityName, aSystem)/]
[/let] 
[/if]
[/let]
[/let]
[/template]

[template generateFewInterfaceText(startComponentName: String, providers: Sequence(BasicComponent), aMethodName: String, action: ExternalCallAction, repository: Repository, aSystem: OclAny)]
[let longName :String = generateMultipleComponentName(providers, action)]
[generateProviderText(startComponentName, providers -> first(), aMethodName, action, repository, longName, aSystem)/]
[/let]
[/template]
[template private generateMultipleComponentName(providers: Sequence(BasicComponent), action : ExternalCallAction) post(trim())]
"[providers -> first().entityName/] \n ([getExternalInterface(action)/])  "  
[/template]
[template private iterateNames(providers: Sequence(BasicComponent)) post(trim())]
[for (provider : BasicComponent| providers) separator('\\n')][provider.entityName/][/for]
[/template]
[template private getExternalCallMethod(content: ExternalCallAction) post (trim())] 
	[content.calledService_ExternalService.entityName/]
[/template]

[template private generateInterfaceText(startComponentName: String, aMethodName: String, action: ExternalCallAction) post(trim())]
[startComponentName/] -> [getExternalInterface(action)/] : [aMethodName/]
[getExternalInterface(action)/] -> [startComponentName/] : [getReturnValue(action, aMethodName)/]
[/template]

[template private generateProviderText(startComponentName: String, nextComponent: BasicComponent, aMethodName: String, action: ExternalCallAction, repository: Repository, nextComponentName: String, aSystem: OclAny) post(trim())]
[startComponentName/] -> [nextComponentName/] : [aMethodName/]
[generateSeff(nextComponent, repository, aMethodName, nextComponentName, aSystem)/]
[nextComponentName/] -> [startComponentName/]  : [getReturnValue(action, aMethodName)/]
[/template]

[template private getReturnValue(action: ExternalCallAction,  aMethodName :String) post(trim())]
			[if action.calledService_ExternalService.returnType__OperationSignature.repository__DataType.entityName.oclIsInvalid()]
void
			[/if] 
			[if not action.calledService_ExternalService.returnType__OperationSignature.repository__DataType.oclIsInvalid()]
[ action.calledService_ExternalService.returnType__OperationSignature.eGet('entityName')/]
			[/if]
[/template]

[template private getExternalInterface(content: ExternalCallAction) post (trim())]
[parseExternalInterface(content.role_ExternalService.entityName)/]
[/template]


[query private getComponentFromSystem(aSystem: System, action: ExternalCallAction): BasicComponent = findAssemblyContext(aSystem, action.role_ExternalService).eContainer(BasicComponent)/]
[query private findAssemblyContext(aSystem: System, role: OperationRequiredRole): OperationProvidedRole = aSystem.eContents(AssemblyConnector) -> any(connector: AssemblyConnector| connector.requiredRole_AssemblyConnector.id.equalsIgnoreCase(role.id)).providedRole_AssemblyConnector/]


[query private isAdapter(component: BasicComponent) : Boolean = component.eContents(OperationRequiredRole) -> exists( requiredRole: OperationRequiredRole | containsProvider(component.eContents(OperationProvidedRole).providedInterface__OperationProvidedRole.id,requiredRole.requiredInterface__OperationRequiredRole.id))/]
[query private equalImplementations(providers : Sequence(BasicComponent)) : Sequence(BasicComponent) = providers -> reject(provider: BasicComponent| dontMatchProvideImplementations(provider, providers -> first()) and dontMatchRequireImplementations(provider, providers -> first()))/]
[query private dontMatchProvideImplementations(a : BasicComponent, b : BasicComponent) : Boolean = a.providedRoles_InterfaceProvidingEntity -> exists(providedRolea : ProvidedRole | not b.providedRoles_InterfaceProvidingEntity -> exists(providedRoleb : ProvidedRole | compareInterfaceNames(providedRolea.entityName,providedRoleb.entityName)) )/]
[query private dontMatchRequireImplementations(a : BasicComponent, b : BasicComponent) : Boolean = a.requiredRoles_InterfaceRequiringEntity -> exists(requiredRolea : RequiredRole | not b.requiredRoles_InterfaceRequiringEntity -> exists(requiredRoleb : RequiredRole | compareInterfaceNames(requiredRolea.entityName,requiredRoleb.entityName)) )/]
[query private compareInterfaceNames(a :String , b:String) : Boolean = parseExternalInterface(a).equalsIgnoreCase(parseExternalInterface(b))/]

[query private getAllProviders(repo : Repository): Sequence(BasicComponent) =  repo.eAllContents(BasicComponent) /]
[query private selectPorviders(allComps : Sequence(BasicComponent), action : ExternalCallAction) : Sequence(BasicComponent) = allComps -> select(comp : BasicComponent | containsProvider(comp.eContents(OperationProvidedRole).providedInterface__OperationProvidedRole.id, action.role_ExternalService.requiredInterface__OperationRequiredRole.id)) /]
[query private containsProvider( aproviderIDs: Sequence(String), aProviderID: String) : Boolean = aproviderIDs -> exists (id: String | id.equalsIgnoreCase(aProviderID))/]
[query private parseExternalInterface(aName: String) : String = invoke('org.eclipse.acceleo.module.palladio.common.ParsingUtil', 'parseExternalCallActionInterface(java.lang.String)', Sequence{aName})/]
[query private getCalledInterface(action : ExternalCallAction, repo : Repository) : Sequence(OperationInterface) = repo.eAllContents(OperationInterface)-> select(interface: OperationInterface | interface.entityName.equalsIgnoreCase(getExternalInterface(action)))/]
