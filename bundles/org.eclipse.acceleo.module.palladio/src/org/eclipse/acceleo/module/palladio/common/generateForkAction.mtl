[comment encoding = UTF-8 /]
[module generateForkAction('http://palladiosimulator.org/PalladioComponentModel/Repository/5.2', 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2', 'http://palladiosimulator.org/PalladioComponentModel/5.2')]
[import org::eclipse::acceleo::module::palladio::common::generate/]

[template public generateForkAction(action : AbstractAction, repository :Repository, componentName: String, aSystem: OclAny, aModusUML: Boolean, aBranchNumber : Integer) post(trim())]
[if action.oclIsTypeOf(ForkAction)] 
[let forkAction: ForkAction = action.oclAsType(ForkAction)]
[let firstBehaviour: ForkedBehaviour = forkAction.synchronisingBehaviours_ForkAction.synchronousForkedBehaviours_SynchronisationPoint -> any(fb | true)]
par Fork
[startActionGeneration(getStartAction(firstBehaviour), repository, componentName, aSystem, aModusUML, aBranchNumber)/]
[let behaviours: OrderedSet(ForkedBehaviour) = forkAction.synchronisingBehaviours_ForkAction.synchronousForkedBehaviours_SynchronisationPoint -> reject(fb | fb = firstBehaviour)]
[iterateBehaviour(behaviours, repository, componentName, aSystem, aModusUML, aBranchNumber + 1)/]
[/let]
end
[/let]  
[/let]
[/if] 
[/template] 

[template private iterateBehaviour(behaviours: OrderedSet(ForkedBehaviour), repository : Repository, componentName : String, aSystem: OclAny, aModusUML: Boolean, aBranchNumber: Integer)]
else [startActionGeneration(getStartAction(behaviours -> first()), repository, componentName, aSystem, aModusUML, aBranchNumber)/]
[if behaviours -> size() > 1]
[iterateBehaviour(behaviours -> subOrderedSet(2, behaviours -> size()), repository, componentName, aSystem, aModusUML, aBranchNumber + 1)/]
[/if]
[/template]
 